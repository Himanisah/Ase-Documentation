{
  "README.html": {
    "href": "README.html",
    "title": "ASE Portfolio | ASE Project",
    "keywords": "ASE Portfolio Fill in the fields below. Your Name Himani Sah Your Group Your Tutor Keep your progress up to date below. Put \"DONE\" after each section, when you have done it. Checkpoint 1 Version Control (1) 5 marks At least two documented commits to provided on GitHub Classroom BEFORE 12pm 7th October. At least 5 documented commits. Readme.md file filled in correctly. 2 Unit Tests for basic drawing commands above (1) 5 marks Unit Test for moveto command (variables storing pen position are correct) Unit Test for drawTo command (variables storing pen position are correct) Unit Test for a multiline program. 3 XML Comments/documentation produced (1) 5 marks* Fully documented with XML comments and Documentation web site produced 4 Exception Handling (1) 5 marks* 5 Library (DLL) installed and working with reasonable user interface (2) 10 marks Form interface with program window, output window and run button BOOSE DLL library installed call about method and display returned information in output/debug window you can use System.Diagnostics to output to the debug window 6 Basic drawing commands of the library are implemented (2) 10 marks Moveto, circle, rect, pencolour, write. Unrestricted drawing programs can be run (1unrestrictedDrawing.boose) Tutor's Feedback Final Submission 1 Further Version Control (1) 5 marks You must continue to use VC to a professional standard with frequent and clear commits Your Readme.md must be up to date 2 Use of Interfaces (1) 5 marks Interfaces to be used for all classes where appropriate 3 Further Unit Testing (1) 5 marks Tests for full program all of the facilities completed in 5,6 and 7 below It is up to you how design your tests (i.e. one test per facility or one test testing many but they must be clearly documented with XML comments) 4 Design Patterns (1) 5 marks Use of factory Design Pattern for command creation Demonstrate the use of another design pattern of your choice (for 5,6 and 7 you can click the links to see the example BOOSE programs that must be run, these are in your Portfolio. You must run the unrestricted programs and replace the image already there with an image of your BOOSE Interpreter running the BOOSE programs. You may show further programs in your portfolio.) 5 Replaced variables (2) Int 4 marks Real 4 marks Array 5 marks 6 Replaced if, while, for (2) While 5 marks For 6 marks If else 6 marks 7 Replaced Methods (2) 5 marks 8 Additional (web version, text-based version, extension to BOOSE itself, etc, discuss with your tutor) (2) 10 marks Tutor's Feedback note Remember that the BOOSE library is a work in progress and is likely to have bug fixes and updates. Check Discord and/or myBeckett to see if updates have been released. Report any bugs to @dmullier\\ v1.0"
  },
  "api/ASE_Assignment_Demo.AppCanvas.html": {
    "href": "api/ASE_Assignment_Demo.AppCanvas.html",
    "title": "Class AppCanvas | ASE Project",
    "keywords": "Class AppCanvas Namespace ASE_Assignment_Demo Assembly ASE Assignment Demo.dll Represents a canvas implementation jghhjgh for drawing shapes, lines, and text. public class AppCanvas : ICanvas Inheritance object AppCanvas Implements ICanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppCanvas() Initializes a new instance of the AppCanvas class with default settings. public AppCanvas() Fields XCanvasSize public int XCanvasSize Field Value int YCanvasSize public int YCanvasSize Field Value int filled public bool filled Field Value bool Properties Filled Gets or sets a value indicating whether the object is filled. public bool Filled { get; set; } Property Value bool PenColour Gets or sets the current pen color. public object PenColour { get; set; } Property Value object Xpos Gets or sets the current X-coordinate of the pen. public int Xpos { get; set; } Property Value int Ypos Gets or sets the current Y-coordinate of the pen. public int Ypos { get; set; } Property Value int Methods Circle(int, bool) Draws a circle at the current pen position. public void Circle(int radius, bool filled) Parameters radius int The radius of the circle. filled bool If true, the circle is filled; otherwise, it is not. Exceptions CanvasException Thrown when the radius is invalid. Clear() Clears the canvas by filling it with a default background color. public void Clear() DrawTo(int, int) Draws a line from the current pen position to the specified coordinates. public void DrawTo(int toX, int toY) Parameters toX int The target X-coordinate. toY int The target Y-coordinate. Exceptions CanvasException Thrown when the target position is outside the canvas bounds. MoveTo(int, int) Moves the pen to the specified coordinates without drawing. public void MoveTo(int x, int y) Parameters x int The target X-coordinate. y int The target Y-coordinate. Exceptions CanvasException Thrown when the target position is outside the canvas bounds. Rect(int, int, bool) Draws a rectangle with the specified width, height, and filled state. public void Rect(int width, int height, bool filled) Parameters width int The width of the rectangle. height int The height of the rectangle. filled bool If true, the rectangle is filled; otherwise, it is outlined. Reset() Resets the pen position to the origin (0,0). public void Reset() Set(int, int) Sets the size of the canvas and resets the pen position. public void Set(int xsize, int ysize) Parameters xsize int The width of the canvas. ysize int The height of the canvas. SetColour(int, int, int) Sets the pen color using RGB values. public void SetColour(int red, int green, int blue) Parameters red int The red component (0-255). green int The green component (0-255). blue int The blue component (0-255). Exceptions CanvasException Thrown when any color component exceeds its range. Tri(int, int) Draws a triangle at the current pen position. public void Tri(int width, int height) Parameters width int The width of the triangle's base. height int The height of the triangle. Exceptions CanvasException Thrown when the dimensions are invalid. WriteText(string) Writes text at the current pen position. public void WriteText(string text) Parameters text string The text to write. Exceptions CanvasException Thrown when the text is null or empty. getBitmap() Gets the bitmap representation of the canvas. public object getBitmap() Returns object The bitmap object."
  },
  "api/ASE_Assignment_Demo.AppCast.html": {
    "href": "api/ASE_Assignment_Demo.AppCast.html",
    "title": "Class AppCast | ASE Project",
    "keywords": "Class AppCast Namespace ASE_Assignment_Demo Assembly ASE Assignment Demo.dll Represents a command for casting a variable's value from one type to another within the program, specifically from a real number to an integer. public class AppCast : Command, ICommand Inheritance object Command AppCast Implements ICommand Inherited Members Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) Checks the parameters for the cast operation, ensuring correctness and validity. public override void CheckParameters(string[] parameter) Parameters parameter string[] The parameters provided for the command. Exceptions CommandException Thrown if the number of parameters is not exactly two. Compile() Compiles the cast command, validating the existence of variables and compatibility for casting. public override void Compile() Exceptions CommandException Thrown if one or both variables do not exist, or if casting is incompatible. Execute() Executes the cast operation, converting the value of a real variable to an integer and assigning it to the target variable. public override void Execute() Exceptions InvalidCastException Thrown if the variable types are incompatible with the casting logic."
  },
  "api/ASE_Assignment_Demo.AppElse.html": {
    "href": "api/ASE_Assignment_Demo.AppElse.html",
    "title": "Class AppElse | ASE Project",
    "keywords": "Class AppElse Namespace ASE_Assignment_Demo Assembly ASE Assignment Demo.dll Represents an \"Else\" compound command in the application, providing behavior for conditional branching. public class AppElse : AppCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppCompoundCommand AppElse Implements ICommand Inherited Members AppCompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppElse() Initializes a new instance of the AppElse class. public AppElse() Properties CorrespondingEnd Gets or sets the corresponding \"End\" command. public End CorrespondingEnd { get; set; } Property Value End Methods CheckParameters(string[]) Validates the parameters provided to the \"Else\" command. public override void CheckParameters(string[] parameters) Parameters parameters string[] The parameters passed to the command. Exceptions CommandException Thrown if the number of parameters is not exactly one or the parameter does not equal \"else\". Compile() Compiles the \"Else\" command, setting up its relationships and execution flow. public override void Compile() Exceptions InvalidOperationException Thrown if the corresponding command cannot be found or is invalid. Execute() Executes the \"Else\" command at runtime. public override void Execute() Exceptions InvalidOperationException Thrown if the corresponding command is missing or improperly configured."
  },
  "api/ASE_Assignment_Demo.AppFor.html": {
    "href": "api/ASE_Assignment_Demo.AppFor.html",
    "title": "Class AppFor | ASE Project",
    "keywords": "Class AppFor Namespace ASE_Assignment_Demo Assembly ASE Assignment Demo.dll public class AppFor : For, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand For AppFor Implements ICommand Inherited Members For.Compile() For.LoopControlV For.From For.To For.Step ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() public override void Execute() ResetOrDecreaseCount(int) public void ResetOrDecreaseCount(int newValue) Parameters newValue int"
  },
  "api/ASE_Assignment_Demo.AppIf.html": {
    "href": "api/ASE_Assignment_Demo.AppIf.html",
    "title": "Class AppIf | ASE Project",
    "keywords": "Class AppIf Namespace ASE_Assignment_Demo Assembly ASE Assignment Demo.dll public class AppIf : AppCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppCompoundCommand AppIf Implements ICommand Inherited Members AppCompoundCommand.CorrespondingCommand AppCompoundCommand.CheckParameters(string[]) AppCompoundCommand.Compile() ConditionalCommand.endLineNumber ConditionalCommand.Execute() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppIf() Constructor for AppIf without instance restrictions. public AppIf() Methods ReduceRestrictions() Overrides the ReduceRestrictions method to do nothing, removing the restriction logic. protected void ReduceRestrictions()"
  },
  "api/ASE_Assignment_Demo.AppPeek.html": {
    "href": "api/ASE_Assignment_Demo.AppPeek.html",
    "title": "Class AppPeek | ASE Project",
    "keywords": "Class AppPeek Namespace ASE_Assignment_Demo Assembly ASE Assignment Demo.dll Represents the \"Peek\" command, which retrieves a value from an array and updates a variable with the retrieved value. public class AppPeek : AppArray, ICommand Inheritance object Command Evaluation AppArray AppPeek Implements ICommand Inherited Members AppArray.PEEK AppArray.POKE AppArray.type AppArray.IntValue AppArray.RealValue AppArray.rowsCount AppArray.columnsCount AppArray.intArray AppArray.realArray AppArray.pokeValue AppArray.peekValue AppArray.rowExpression AppArray.columnExpression AppArray.rowCurrent AppArray.columnCurrent AppArray.Rows AppArray.Columns AppArray.ArrayRestrictions() AppArray.ReduceRestrictionCounter() AppArray.ProcessArrayParametersCompile(bool) AppArray.ProcessArrayParametersExecute(bool) AppArray.SetIntArray(int, int, int) AppArray.SetRealArray(double, int, int) AppArray.GetIntArray(int, int) AppArray.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppPeek() Initializes a new instance of the AppPeek class. public AppPeek() Methods CheckParameters(string[]) Validates the parameters provided to the \"Peek\" command. public override void CheckParameters(string[] parameters) Parameters parameters string[] The parameters passed to the command. Exceptions NotImplementedException Thrown because parameter validation is not implemented. Compile() Compiles the \"Peek\" command, preparing it for execution. public override void Compile() Execute() Executes the \"Peek\" command, retrieving a value from an array and updating the target variable. public override void Execute() Exceptions CommandException Thrown if the array type is unsupported in the \"Peek\" operation."
  },
  "api/ASE_Assignment_Demo.AppPoke.html": {
    "href": "api/ASE_Assignment_Demo.AppPoke.html",
    "title": "Class AppPoke | ASE Project",
    "keywords": "Class AppPoke Namespace ASE_Assignment_Demo Assembly ASE Assignment Demo.dll Represents the \"Poke\" command, which assigns a value to an element in an array. public class AppPoke : AppArray, ICommand Inheritance object Command Evaluation AppArray AppPoke Implements ICommand Inherited Members AppArray.PEEK AppArray.POKE AppArray.type AppArray.IntValue AppArray.RealValue AppArray.rowsCount AppArray.columnsCount AppArray.intArray AppArray.realArray AppArray.pokeValue AppArray.peekValue AppArray.rowExpression AppArray.columnExpression AppArray.rowCurrent AppArray.columnCurrent AppArray.Rows AppArray.Columns AppArray.ArrayRestrictions() AppArray.ReduceRestrictionCounter() AppArray.ProcessArrayParametersCompile(bool) AppArray.ProcessArrayParametersExecute(bool) AppArray.SetIntArray(int, int, int) AppArray.SetRealArray(double, int, int) AppArray.GetIntArray(int, int) AppArray.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppPoke() Initializes a new instance of the AppPoke class. public AppPoke() Methods CheckParameters(string[]) Validates the parameters for the \"Poke\" operation. public override void CheckParameters(string[] parameter) Parameters parameter string[] The parameters passed to the \"Poke\" command. Exceptions CommandException Thrown if the number of parameters is not 2 or 3, which is expected for the \"Poke\" operation. Compile() Compiles the \"Poke\" command, preparing it for execution. public override void Compile() Execute() Executes the \"Poke\" command, which assigns the given value to an array element. public override void Execute() Set(StoredProgram, string) Sets up the program and parameters for the \"Poke\" operation. public override void Set(StoredProgram program, string paramsList) Parameters program StoredProgram The stored program that will be used for setting up the operation. paramsList string The list of parameters to be used in the operation."
  },
  "api/ASE_Assignment_Demo.AppWhile.html": {
    "href": "api/ASE_Assignment_Demo.AppWhile.html",
    "title": "Class AppWhile | ASE Project",
    "keywords": "Class AppWhile Namespace ASE_Assignment_Demo Assembly ASE Assignment Demo.dll public class AppWhile : AppCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppCompoundCommand AppWhile Implements ICommand Inherited Members AppCompoundCommand.CorrespondingCommand AppCompoundCommand.CheckParameters(string[]) AppCompoundCommand.Compile() ConditionalCommand.endLineNumber ConditionalCommand.Execute() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppWhile() Constructor for AppIf without instance restrictions. public AppWhile() Methods ReduceRestrictions() Overrides the ReduceRestrictions method to do nothing, removing the restriction logic. protected void ReduceRestrictions()"
  },
  "api/ASE_Assignment_Demo.Clear.html": {
    "href": "api/ASE_Assignment_Demo.Clear.html",
    "title": "Class Clear | ASE Project",
    "keywords": "Class Clear Namespace ASE_Assignment_Demo Assembly ASE Assignment Demo.dll Represents a command to clear all elements from the canvas. public class Clear : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Clear Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Clear() Initializes a new instance of the Clear class. public Clear() Clear(Canvas) Initializes a new instance of the Clear class with the specified canvas. public Clear(Canvas c) Parameters c Canvas The canvas on which the command will operate. Methods CheckParameters(string[]) Validates the parameters for the clear command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Remarks No validation is needed as the clear command does not require parameters. Execute() Executes the clear command, removing all elements from the canvas. public override void Execute()"
  },
  "api/ASE_Assignment_Demo.Components.AppArray.html": {
    "href": "api/ASE_Assignment_Demo.Components.AppArray.html",
    "title": "Class AppArray | ASE Project",
    "keywords": "Class AppArray Namespace ASE_Assignment_Demo.Components Assembly ASE Assignment Demo.dll Represents an application-level array with support for integer and real number types. Provides functionality to compile, execute, and manipulate array values. public class AppArray : Evaluation, ICommand Inheritance object Command Evaluation AppArray Implements ICommand Derived AppPeek AppPoke Inherited Members Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppArray() Initializes a new instance of the AppArray class. public AppArray() Fields IntValue protected int IntValue Field Value int PEEK Determines whether the operation is a peek (read) operation. protected const bool PEEK = false Field Value bool POKE Determines whether the operation is a poke (write) operation. public const bool POKE = true Field Value bool RealValue protected double RealValue Field Value double columnCurrent protected int columnCurrent Field Value int columnExpression protected string columnExpression Field Value string columnsCount protected int columnsCount Field Value int intArray protected int[,] intArray Field Value int[,] peekValue protected string peekValue Field Value string pokeValue protected string pokeValue Field Value string realArray protected double[,] realArray Field Value double[,] rowCurrent protected int rowCurrent Field Value int rowExpression protected string rowExpression Field Value string rowsCount protected int rowsCount Field Value int type Specifies the type of array (\"int\" or \"real\"). protected string type Field Value string Properties Columns Gets the number of columns in the array. protected int Columns { get; } Property Value int Rows Gets the number of rows in the array. protected int Rows { get; } Property Value int Methods ArrayRestrictions() Defines any specific restrictions for the array. public void ArrayRestrictions() CheckParameters(string[]) Checks the validity of the array parameters. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters for the array. Compile() Compiles the array definition based on provided parameters. public override void Compile() Execute() Executes the initialization of the array based on its type and dimensions. public override void Execute() GetIntArray(int, int) Gets a value from the integer array at the specified row and column. public virtual int GetIntArray(int row, int col) Parameters row int The row index. col int The column index. Returns int The integer value at the specified location. GetRealArray(int, int) Gets a value from the real array at the specified row and column. public virtual double GetRealArray(int row, int col) Parameters row int The row index. col int The column index. Returns double The real value at the specified location. ProcessArrayParametersCompile(bool) Processes array parameters during the compile phase. protected virtual void ProcessArrayParametersCompile(bool isPokeOperation) Parameters isPokeOperation bool Indicates whether the operation is a poke (write). ProcessArrayParametersExecute(bool) Processes array parameters during the execution phase. protected virtual void ProcessArrayParametersExecute(bool isPokeOperation) Parameters isPokeOperation bool Indicates whether the operation is a poke (write). ReduceRestrictionCounter() Reduces the counter for any applicable array restrictions. protected void ReduceRestrictionCounter() SetIntArray(int, int, int) Sets a value in the integer array at the specified row and column. public virtual void SetIntArray(int value, int row, int col) Parameters value int The value to set. row int The row index. col int The column index. SetRealArray(double, int, int) Sets a value in the real array at the specified row and column. public virtual void SetRealArray(double value, int row, int col) Parameters value double The value to set. row int The row index. col int The column index."
  },
  "api/ASE_Assignment_Demo.Components.AppBoolean.html": {
    "href": "api/ASE_Assignment_Demo.Components.AppBoolean.html",
    "title": "Class AppBoolean | ASE Project",
    "keywords": "Class AppBoolean Namespace ASE_Assignment_Demo.Components Assembly ASE Assignment Demo.dll Represents a Boolean component in the application, inheriting functionality from the BOOSE Boolean class. Provides a mechanism to override and remove instance restrictions. public class AppBoolean : Boolean, ICommand Inheritance object Command Evaluation Boolean AppBoolean Implements ICommand Inherited Members Boolean.Compile() Boolean.Execute() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Overrides the method to remove any restrictions on the creation of instances of the AppBoolean class. public virtual void Restrictions()"
  },
  "api/ASE_Assignment_Demo.Components.AppCommandConditional.html": {
    "href": "api/ASE_Assignment_Demo.Components.AppCommandConditional.html",
    "title": "Class AppCommandConditional | ASE Project",
    "keywords": "Class AppCommandConditional Namespace ASE_Assignment_Demo.Components Assembly ASE Assignment Demo.dll Represents a conditional command that extends the BOOSE.ConditionalCommand class, providing additional functionality to manipulate private static fields in the BOOSE.Boolean class. public class AppCommandConditional : ConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppCommandConditional Implements ICommand Inherited Members ConditionalCommand.endLineNumber ConditionalCommand.Compile() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() Executes the conditional command and resets the private static field 꿁 to 0. public override void Execute() Examples var command = new AppCommandConditional(); command.Execute(); Remarks Overrides the BOOSE.ConditionalCommand.Execute() method to include resetting the value of the private static field 꿁 to 0 after executing the base command. ResetOrDecreaseCount(int) Resets or modifies the value of a private static field in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the private static field. Examples var command = new AppCommandConditional(); command.ResetOrDecreaseCount(5); Remarks This method utilizes reflection to access and modify the private static field 꿁 in the BOOSE.Boolean class. The field is intended to represent internal state that can be reset or updated as required. Exceptions BOOSEException Thrown when the private field 꿁 cannot be accessed using reflection."
  },
  "api/ASE_Assignment_Demo.Components.AppCommandFactory.html": {
    "href": "api/ASE_Assignment_Demo.Components.AppCommandFactory.html",
    "title": "Class AppCommandFactory | ASE Project",
    "keywords": "Class AppCommandFactory Namespace ASE_Assignment_Demo.Components Assembly ASE Assignment Demo.dll Factory class to create command objects based on input strings. public class AppCommandFactory : CommandFactory, ICommandFactory Inheritance object CommandFactory AppCommandFactory Implements ICommandFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppCommandFactory() Initializes a new instance of the AppCommandFactory class. public AppCommandFactory() Methods MakeCommand(string) Creates a command object based on the given command string. public override ICommand MakeCommand(string command) Parameters command string The name of the command to create. Returns ICommand An instance of a class implementing BOOSE.ICommand corresponding to the command name. Exceptions ArgumentException Thrown when the command string is null, empty, or whitespace. FactoryException Thrown when the command is not supported by the factory."
  },
  "api/ASE_Assignment_Demo.Components.AppCompoundCommand.html": {
    "href": "api/ASE_Assignment_Demo.Components.AppCompoundCommand.html",
    "title": "Class AppCompoundCommand | ASE Project",
    "keywords": "Class AppCompoundCommand Namespace ASE_Assignment_Demo.Components Assembly ASE Assignment Demo.dll Represents a compound command that can be used in the application. This class extends the BOOSE.ConditionalCommand class and provides additional functionality for managing and validating command parameters. public class AppCompoundCommand : ConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppCompoundCommand Implements ICommand Derived AppElse AppIf AppWhile AppEnd Inherited Members ConditionalCommand.endLineNumber ConditionalCommand.Execute() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppCompoundCommand() Initializes a new instance of the AppCompoundCommand class. This constructor does not enforce any instance restrictions. public AppCompoundCommand() Properties CorrespondingCommand Gets or sets the corresponding conditional command. public ConditionalCommand CorrespondingCommand { get; set; } Property Value ConditionalCommand Methods CheckParameters(string[]) Validates the parameters passed to the command. public override void CheckParameters(string[] parameters) Parameters parameters string[] An array of parameters to validate. Exceptions CommandException Thrown when the number of parameters is not exactly one, or when the parameter content does not contain an expected keyword. Compile() Compiles the command, preparing it for execution. public override void Compile()"
  },
  "api/ASE_Assignment_Demo.Components.AppEnd.html": {
    "href": "api/ASE_Assignment_Demo.Components.AppEnd.html",
    "title": "Class AppEnd | ASE Project",
    "keywords": "Class AppEnd Namespace ASE_Assignment_Demo.Components Assembly ASE Assignment Demo.dll Represents the \"End\" command, which marks the conclusion of a compound structure (e.g., If, While, For, or Method) in the application. Inherits from AppCompoundCommand. public class AppEnd : AppCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand AppCompoundCommand AppEnd Implements ICommand Inherited Members AppCompoundCommand.CorrespondingCommand AppCompoundCommand.CheckParameters(string[]) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppEnd() Initializes a new instance of the AppEnd class. public AppEnd() Methods Compile() Compiles the \"End\" command by linking it to its corresponding command (e.g., If, While, For, or Method) and validating its parameters. public override void Compile() Exceptions CommandException Thrown if the parameters do not match the expected syntax for the corresponding command. Execute() Executes the \"End\" command during runtime by handling the specific behavior for each type of corresponding command (e.g., loops or methods). public override void Execute() Exceptions CommandException Thrown if a loop control variable does not exist or if the loop step is invalid."
  },
  "api/ASE_Assignment_Demo.Components.AppInt.html": {
    "href": "api/ASE_Assignment_Demo.Components.AppInt.html",
    "title": "Class AppInt | ASE Project",
    "keywords": "Class AppInt Namespace ASE_Assignment_Demo.Components Assembly ASE Assignment Demo.dll Represents an integer component in the application. This class inherits from the BOOSE.Int class and provides an override for enforcing restrictions. public class AppInt : Int, ICommand Inheritance object Command Evaluation Int AppInt Implements ICommand Inherited Members Int.Compile() Int.Execute() Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Enforces restrictions specific to the integer component. Currently, this method applies default restriction logic. public override void Restrictions()"
  },
  "api/ASE_Assignment_Demo.Components.AppMethod.html": {
    "href": "api/ASE_Assignment_Demo.Components.AppMethod.html",
    "title": "Class AppMethod | ASE Project",
    "keywords": "Class AppMethod Namespace ASE_Assignment_Demo.Components Assembly ASE Assignment Demo.dll Represents a custom implementation of the BOOSE.Method class. Provides additional functionality for resetting or decreasing internal counters. public class AppMethod : Method, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand Method AppMethod Implements ICommand Inherited Members Method.CheckParameters(string[]) Method.Compile() Method.Execute() Method.LocalVariables Method.MethodName Method.Type CompoundCommand.ReduceRestrictions() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppMethod() Initializes a new instance of the AppMethod class. Reduces restrictions and resets or decreases specific counters. public AppMethod() Methods ResetOrDecreaseCount(int) Resets or decreases the internal static counter in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the counter. Exceptions BOOSEException Thrown if the internal field cannot be accessed or modified. ResetOrDecreaseMethodCount(int) Resets or decreases the internal static method counter in the BOOSE.Method class. public void ResetOrDecreaseMethodCount(int newValue) Parameters newValue int The new value to set for the method counter. Exceptions BOOSEException Thrown if the internal field cannot be accessed or modified."
  },
  "api/ASE_Assignment_Demo.Components.AppParser.html": {
    "href": "api/ASE_Assignment_Demo.Components.AppParser.html",
    "title": "Class AppParser | ASE Project",
    "keywords": "Class AppParser Namespace ASE_Assignment_Demo.Components Assembly ASE Assignment Demo.dll Parses commands and programs, validating syntax and structure, and generating appropriate commands for execution. public class AppParser : IParser Inheritance object AppParser Implements IParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppParser(CommandFactory, StoredProgram) Initializes a new instance of the AppParser class. public AppParser(CommandFactory factory, StoredProgram program) Parameters factory CommandFactory The command factory to create commands. program StoredProgram The program storage where parsed commands are managed. Methods ParseCommand(string) Parses a single line of text into a command. public virtual ICommand ParseCommand(string line) Parameters line string The line of text to parse. Returns ICommand An BOOSE.ICommand object representing the parsed command, or null if the line starts with an asterisk (*), indicating a comment. Exceptions ParserException Thrown if the line contains invalid syntax or variables. ParseProgram(string) Parses an entire program, line by line, and validates its structure. public virtual void ParseProgram(string program) Parameters program string The program code to parse as a string. Exceptions ParserException Thrown if syntax errors are detected in the program."
  },
  "api/ASE_Assignment_Demo.Components.AppReal.html": {
    "href": "api/ASE_Assignment_Demo.Components.AppReal.html",
    "title": "Class AppReal | ASE Project",
    "keywords": "Class AppReal Namespace ASE_Assignment_Demo.Components Assembly ASE Assignment Demo.dll public class AppReal : Real, ICommand Inheritance object Command Evaluation Real AppReal Implements ICommand Inherited Members Real.Compile() Real.Execute() Real.Value Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Overrides the restriction logic to allow unlimited instances of AppReal. public virtual void Restrictions()"
  },
  "api/ASE_Assignment_Demo.Components.GlobalConfiguration.html": {
    "href": "api/ASE_Assignment_Demo.Components.GlobalConfiguration.html",
    "title": "Class GlobalConfiguration | ASE Project",
    "keywords": "Class GlobalConfiguration Namespace ASE_Assignment_Demo.Components Assembly ASE Assignment Demo.dll public class GlobalConfiguration Inheritance object GlobalConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties MaxX Gets or sets the maximum X coordinate (width) of the canvas. This value defines the maximum horizontal position during drawing operations. The default value is 640 pixels. public static int MaxX { get; set; } Property Value int Remarks The value of MaxX should be updated if you want to change the canvas's horizontal limit. It should be a positive integer value. MaxY Gets or sets the maximum Y coordinate (height) of the canvas. This value defines the maximum vertical position during drawing operations. The default value is 480 pixels. public static int MaxY { get; set; } Property Value int Remarks The value of MaxY should be updated if you want to change the canvas's vertical limit. It should be a positive integer value. OutputExceptionMsg Gets or sets the global output exception message. public static string OutputExceptionMsg { get; set; } Property Value string Remarks This property stores the exception message related to recent operations. By default, it is an empty string."
  },
  "api/ASE_Assignment_Demo.Components.html": {
    "href": "api/ASE_Assignment_Demo.Components.html",
    "title": "Namespace ASE_Assignment_Demo.Components | ASE Project",
    "keywords": "Namespace ASE_Assignment_Demo.Components Classes AppArray Represents an application-level array with support for integer and real number types. Provides functionality to compile, execute, and manipulate array values. AppBoolean Represents a Boolean component in the application, inheriting functionality from the BOOSE Boolean class. Provides a mechanism to override and remove instance restrictions. AppCommandConditional Represents a conditional command that extends the BOOSE.ConditionalCommand class, providing additional functionality to manipulate private static fields in the BOOSE.Boolean class. AppCommandFactory Factory class to create command objects based on input strings. AppCompoundCommand Represents a compound command that can be used in the application. This class extends the BOOSE.ConditionalCommand class and provides additional functionality for managing and validating command parameters. AppEnd Represents the \"End\" command, which marks the conclusion of a compound structure (e.g., If, While, For, or Method) in the application. Inherits from AppCompoundCommand. AppInt Represents an integer component in the application. This class inherits from the BOOSE.Int class and provides an override for enforcing restrictions. AppMethod Represents a custom implementation of the BOOSE.Method class. Provides additional functionality for resetting or decreasing internal counters. AppParser Parses commands and programs, validating syntax and structure, and generating appropriate commands for execution. AppReal GlobalConfiguration"
  },
  "api/ASE_Assignment_Demo.Fill.html": {
    "href": "api/ASE_Assignment_Demo.Fill.html",
    "title": "Class Fill | ASE Project",
    "keywords": "Class Fill Namespace ASE_Assignment_Demo Assembly ASE Assignment Demo.dll Represents a command to set the filled status of shapes on the canvas. public class Fill : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Fill Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Fill() Initializes a new instance of the Fill class. public Fill() Fill(Canvas, string) Initializes a new instance of the Fill class with the specified canvas and text parameter. public Fill(Canvas c, string text) Parameters c Canvas The canvas on which the command will operate. text string The text parameter for the fill command. Exceptions ArgumentNullException Thrown if text is null. Methods CheckParameters(string[]) Validates the parameters for the fill command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters to validate. Exceptions CommandException Thrown if the parameter list is null, contains an invalid number of parameters, or the text parameter is null, empty, or whitespace. Execute() Executes the fill command, setting the filled status of the shape based on the provided text. public override void Execute() Exceptions RestrictionException Thrown if the text parameter is null, empty, whitespace, or exceeds the allowed length. SetFilled(string) Sets the filled state of the shape using a method with an argument. public void SetFilled(string isFilledStr) Parameters isFilledStr string A string value (\"true\" or \"false\") to set whether the shape is filled. Exceptions CommandException Thrown if the string value is not \"true\" or \"false\"."
  },
  "api/ASE_Assignment_Demo.Form1.html": {
    "href": "api/ASE_Assignment_Demo.Form1.html",
    "title": "Class Form1 | ASE Project",
    "keywords": "Class Form1 Namespace ASE_Assignment_Demo Assembly ASE Assignment Demo.dll Represents the main form of the application, providing a user interface for canvas operations. public class Form1 : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form Form1 Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Form1() Initializes a new instance of the Form1 class. public Form1() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/ASE_Assignment_Demo.GlobalConfig.html": {
    "href": "api/ASE_Assignment_Demo.GlobalConfig.html",
    "title": "Class GlobalConfig | ASE Project",
    "keywords": "Class GlobalConfig Namespace ASE_Assignment_Demo Assembly ASE Assignment Demo.dll Represents a global configuration class for shared application settings. public class GlobalConfig Inheritance object GlobalConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FilledStatus Gets or sets the filled status for shapes on the canvas. public static bool FilledStatus { get; set; } Property Value bool A boolean indicating whether shapes should be filled (true) or not (false)."
  },
  "api/ASE_Assignment_Demo.Parser.html": {
    "href": "api/ASE_Assignment_Demo.Parser.html",
    "title": "Class Parser | ASE Project",
    "keywords": "Class Parser Namespace ASE_Assignment_Demo Assembly ASE Assignment Demo.dll Represents a parser responsible for converting text-based commands into executable objects. public class Parser : IParser Inheritance object Parser Implements IParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Parser() Initializes a new instance of the Parser class. public Parser() Parser(ICommandFactory, StoredProgram) Initializes a new instance of the Parser class with a command factory and a stored program. public Parser(ICommandFactory commandFactory, StoredProgram storedProgram) Parameters commandFactory ICommandFactory The command factory used to create command objects. storedProgram StoredProgram The stored program where parsed commands are stored. Exceptions ArgumentNullException Thrown if commandFactory or storedProgram is null. Methods ParseCommand(string) Parses a single line of text into a command object. public ICommand ParseCommand(string line) Parameters line string The line of text to parse. Returns ICommand An BOOSE.ICommand object representing the parsed command, or null if the line is a comment or empty. Exceptions ParserException Thrown if there are issues with parsing the line. ParseProgram(string) Parses a program consisting of multiple lines of text and stores the resulting commands. public void ParseProgram(string program) Parameters program string The text of the program to parse. Exceptions ArgumentException Thrown if the program is null or empty."
  },
  "api/ASE_Assignment_Demo.Reset.html": {
    "href": "api/ASE_Assignment_Demo.Reset.html",
    "title": "Class Reset | ASE Project",
    "keywords": "Class Reset Namespace ASE_Assignment_Demo Assembly ASE Assignment Demo.dll Represents a command to reset the canvas to its initial state. public class Reset : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Reset Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Reset() Initializes a new instance of the Reset class. public Reset() Reset(Canvas) Initializes a new instance of the Reset class with a specified canvas. public Reset(Canvas c) Parameters c Canvas The canvas to reset. Methods CheckParameters(string[]) Validates the parameters for the reset command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters for the command. Remarks No validation is needed as there are no parameters for this command. Execute() Executes the reset command, clearing the canvas and returning it to its initial state. public override void Execute()"
  },
  "api/ASE_Assignment_Demo.Triangle.html": {
    "href": "api/ASE_Assignment_Demo.Triangle.html",
    "title": "Class Triangle | ASE Project",
    "keywords": "Class Triangle Namespace ASE_Assignment_Demo Assembly ASE Assignment Demo.dll Represents a command to draw a triangle on a canvas with specified base length and height. public class Triangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters Triangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Triangle() Initializes a new instance of the Triangle class. public Triangle() Triangle(Canvas, int, int) Initializes a new instance of the Triangle class with the specified canvas, base length, and height. public Triangle(Canvas c, int baseLength, int height) Parameters c Canvas The canvas on which the triangle will be drawn. baseLength int The base length of the triangle. height int The height of the triangle. Methods CheckParameters(string[]) Validates the parameters for the Triangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters for the command. Exceptions CommandException Thrown when the parameter list is invalid or does not contain exactly 2 parameters. Execute() Executes the command to draw a triangle on the canvas. public override void Execute()"
  },
  "api/ASE_Assignment_Demo.WriteTo.html": {
    "href": "api/ASE_Assignment_Demo.WriteTo.html",
    "title": "Class WriteTo | ASE Project",
    "keywords": "Class WriteTo Namespace ASE_Assignment_Demo Assembly ASE Assignment Demo.dll Represents a command to write text to a canvas. public class WriteTo : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter WriteTo Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors WriteTo() public WriteTo() WriteTo(Canvas, string) public WriteTo(Canvas c, string text) Parameters c Canvas text string Methods CheckParameters(string[]) public override void CheckParameters(string[] parameterList) Parameters parameterList string[] Execute() public override void Execute()"
  },
  "api/ASE_Assignment_Demo.html": {
    "href": "api/ASE_Assignment_Demo.html",
    "title": "Namespace ASE_Assignment_Demo | ASE Project",
    "keywords": "Namespace ASE_Assignment_Demo Classes AppCanvas Represents a canvas implementation jghhjgh for drawing shapes, lines, and text. AppCast Represents a command for casting a variable's value from one type to another within the program, specifically from a real number to an integer. AppElse Represents an \"Else\" compound command in the application, providing behavior for conditional branching. AppFor AppIf AppPeek Represents the \"Peek\" command, which retrieves a value from an array and updates a variable with the retrieved value. AppPoke Represents the \"Poke\" command, which assigns a value to an element in an array. AppWhile Clear Represents a command to clear all elements from the canvas. Fill Represents a command to set the filled status of shapes on the canvas. Form1 Represents the main form of the application, providing a user interface for canvas operations. Reset Represents a command to reset the canvas to its initial state. Triangle Represents a command to draw a triangle on a canvas with specified base length and height. WriteTo Represents a command to write text to a canvas."
  },
  "api/TestProject.ComponentsTest.AppParserTests.html": {
    "href": "api/TestProject.ComponentsTest.AppParserTests.html",
    "title": "Class AppParserTests | ASE Project",
    "keywords": "Class AppParserTests Namespace TestProject.ComponentsTest Assembly TestProject.dll Unit tests for the ParserProgram class to verify the functionality of its command parsing and program parsing capabilities. [TestClass] public class AppParserTests Inheritance object AppParserTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() Sets up the test environment by initializing real instances of dependencies for ParserProgram. [TestInitialize] public void SetUp() TestParseCommand_ShouldThrowFactoryException_ForUnknownCommand() Tests the ParseCommand method to ensure it returns a valid command for known commands. [TestMethod] [ExpectedException(typeof(FactoryException))] public void TestParseCommand_ShouldThrowFactoryException_ForUnknownCommand() TestParseCommand_ShouldThrowParserException_ForUnknownVariableInAssignment() Tests the ParseCommand method to ensure it throws a ParserException for unknown variables in assignments. [TestMethod] [ExpectedException(typeof(ParserException))] public void TestParseCommand_ShouldThrowParserException_ForUnknownVariableInAssignment() TestParseProgram_ShouldParseValidProgram_Correctly() Tests the ParseProgram method to ensure it parses valid programs correctly. [TestMethod] [ExpectedException(typeof(ParserException))] public void TestParseProgram_ShouldParseValidProgram_Correctly() TestParseProgram_ShouldThrowParserException_ForInvalidProgram() Tests the ParseProgram method to ensure it throws a ParserException for invalid program input. [TestMethod] [ExpectedException(typeof(ParserException))] public void TestParseProgram_ShouldThrowParserException_ForInvalidProgram()"
  },
  "api/TestProject.ComponentsTest.html": {
    "href": "api/TestProject.ComponentsTest.html",
    "title": "Namespace TestProject.ComponentsTest | ASE Project",
    "keywords": "Namespace TestProject.ComponentsTest Classes AppParserTests Unit tests for the ParserProgram class to verify the functionality of its command parsing and program parsing capabilities."
  },
  "api/TestProject.UnitTest1.html": {
    "href": "api/TestProject.UnitTest1.html",
    "title": "Class UnitTest1 | ASE Project",
    "keywords": "Class UnitTest1 Namespace TestProject Assembly TestProject.dll [TestClass] public class UnitTest1 Inheritance object UnitTest1 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup() [TestInitialize] public void Setup() TestCircle() [TestMethod] public void TestCircle() TestClear() [TestMethod] public void TestClear() TestDrawTo() [TestMethod] public void TestDrawTo() TestInitialization() [TestMethod] public void TestInitialization() TestMoveTo() [TestMethod] public void TestMoveTo() TestRect() [TestMethod] public void TestRect() TestSetColour() [TestMethod] public void TestSetColour() TestTri() [TestMethod] public void TestTri() TestWriteText() [TestMethod] public void TestWriteText() TestWriteText_EmptyString() [TestMethod] public void TestWriteText_EmptyString()"
  },
  "api/TestProject.html": {
    "href": "api/TestProject.html",
    "title": "Namespace TestProject | ASE Project",
    "keywords": "Namespace TestProject Classes UnitTest1"
  },
  "api/UnitTest.Test.html": {
    "href": "api/UnitTest.Test.html",
    "title": "Class Test | ASE Project",
    "keywords": "Class Test Namespace UnitTest Assembly UnitTest.dll [TestClass] public class Test Inheritance object Test Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods TestMethod1() [TestMethod] public void TestMethod1()"
  },
  "api/UnitTest.TriangleTest.html": {
    "href": "api/UnitTest.TriangleTest.html",
    "title": "Class TriangleTest | ASE Project",
    "keywords": "Class TriangleTest Namespace UnitTest Assembly UnitTest.dll [TestClass] public class TriangleTest Inheritance object TriangleTest Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods TestMethod1() [TestMethod] public void TestMethod1()"
  },
  "api/UnitTest.html": {
    "href": "api/UnitTest.html",
    "title": "Namespace UnitTest | ASE Project",
    "keywords": "Namespace UnitTest Classes Test"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | ASE Project",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "y/getting-started.html": {
    "href": "y/getting-started.html",
    "title": "Getting Started | ASE Project",
    "keywords": "Getting Started"
  },
  "y/introduction.html": {
    "href": "y/introduction.html",
    "title": "Introduction | ASE Project",
    "keywords": "Introduction"
  }
}